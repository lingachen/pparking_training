==========================================
Linex Installation

==========================================
Symbol definition
-- means the purpose or the target
$ means the code which you need to type on terminal
# means the comment of the code
"""""" means you have to replace the all the thing such as (sudo start """root""" -> sudo start pparking)

==========================================
Before any programming, please have a good habit.I f you find some error such like could not find the zip position, please try to update or upgrade the information.

$ sudo su
$ apt-get update
$ apt-get upgrade
$ apt update
$ apt upgrade
==========================================
Installation
BOOT -> PRESS E BEFORE INSTALLING, CHANGE --- -> nomodeset
do not choose the driver here, it might let you crash.
==========================================
-- Nvidia driver install # enable GPU on linex computer
click the left top which enable searching, type in software update.
click on setting, and choose additional driver.
click the best suitable NVIDIA driver and press install.
*** Depending on computer type in may force you to UEFI mode.
PLEASE PLEASE PLEASE follow the instruction (Different Company may have different step)
In HP case, it will force you to UEFI mode. You have to enroll the key and reboot.
After reboot, type in $ nvidia-smi and check whether the GPU card has successfully detected.

==========================================
-- cuda installation

go to https://developer.nvidia.com/cuda-10.0-download-archive
choose Linux -> x86_64 -> Ubuntu -> 18.04 -> runfile and click download

$ sudo sh cuda_10.0.130_410.48_linux.run
PLEASE PLEASE PLEASE choose the second options as No(it will help you to install driver, but that Nvidia driver may not support your computer)

After installation type in $ nvidia-smi and check whether the GPU card has successfully detected.


==========================================

-- install CUDA 10 & cuDNN 7.6
go to https://developer.nvidia.com/rdp/form/cudnn-download-survey
It will need to join the member. choose linex and you will need to find archived file which is suitabled for cuda 10.
If the file is deb file type, enter
$ sudo dpkg -i libcudnn7_7.6.4.38+cuda10.0_amd64.deb
The package name might have slightly different.





==========================================

install TensorRT
sudo apt update && sudo apt-get install nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0 && sudo apt update && sudo apt install -y --no-install-recommends libnvinfer-dev=5.0.2-1+cuda10.0 # if there is any error please change the version of libnvinfer to the version compatible to the version

install Tensorflow
pip install --upgrade tensorflow-gpu #if no pip please sudo apt-get install pip


==========================================
-- opencv2 installation with cuda 10.0 in Ubuntu 18.04
$ sudo apt update
$ sudo apt upgrade

$ sudo apt install build-essential cmake pkg-config unzip yasm git checkinstall
$ sudo apt install libjpeg-dev libpng-dev libtiff-dev
$ sudo apt install libavcodec-dev libavformat-dev libswscale-dev libavresample-dev
$ sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
$ sudo apt install libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev 
$ sudo apt install libfaac-dev libmp3lame-dev libvorbis-dev
$ sudo apt install libopencore-amrnb-dev libopencore-amrwb-dev
$ sudo apt-get install libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils
$ cd /usr/include/linux
$ sudo ln -s -f ../libv4l1-videodev.h videodev.h
$ cd ~
$ sudo apt-get install libgtk-3-dev
$ sudo apt-get install python3-dev python3-pip
$ sudo -H pip3 install -U pip numpy
$ sudo apt install python3-testresources
$ sudo apt-get install libtbb-dev
$ sudo apt-get install libatlas-base-dev gfortran
$ sudo apt-get install libprotobuf-dev protobuf-compiler
$ sudo apt-get install libgoogle-glog-dev libgflags-dev
$ sudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen


$ cd ~
$ wget -O opencv.zip https://github.com/opencv/opencv/archive/4.1.0.zip
$ wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.1.0.zip
$ unzip opencv.zip
$ unzip opencv_contrib.zip


# create virtual environment
$ sudo pip install virtualenv virtualenvwrapper
$ sudo rm -rf ~/.cache/pip
$ echo "Edit ~/.bashrc"
$ export WORKON_HOME=$HOME/.virtualenvs
$ export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
$ source /usr/local/bin/virtualenvwrapper.sh
$ mkvirtualenv cv -p python3
$ pip install numpy



make file
$ cd opencv-4.1.0
$ mkdir build
$ cd build
$ cmake -D CMAKE_BUILD_TYPE=RELEASE 
-D CMAKE_INSTALL_PREFIX=/usr/local 
-D INSTALL_PYTHON_EXAMPLES=ON 
-D INSTALL_C_EXAMPLES=OFF 
-D WITH_TBB=ON 
-D WITH_CUDA=ON 
-D BUILD_opencv_cudacodec=OFF 
-D ENABLE_FAST_MATH=1 
-D CUDA_FAST_MATH=1 
-D WITH_CUBLAS=1 
-D WITH_V4L=ON 
-D WITH_QT=OFF 
-D WITH_OPENGL=ON 
-D WITH_GSTREAMER=ON 
-D OPENCV_GENERATE_PKGCONFIG=ON 
-D OPENCV_PC_FILE_NAME=opencv.pc 
-D OPENCV_ENABLE_NONFREE=ON 
-D OPENCV_PYTHON3_INSTALL_PATH=~/.virtualenvs/cv/lib/python3.6/site-packages 
-D OPENCV_EXTRA_MODULES_PATH=~/downloads/opencv/opencv_contrib-4.1.0/modules 
-D PYTHON_EXECUTABLE=~/.virtualenvs/cv/bin/python 
-D BUILD_EXAMPLES=ON ..

$ nproc
$ make -j8
$ sudo make install

$ sudo /bin/bash -c 'echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf'
$ sudo ldconfig


# change the executable environment to global environment
$ sudo cp -r ~/.virtualenvs/cv/lib/python3.6/site-packages/cv2 /usr/local/lib/python3.6/dist-packages

$ echo "Modify config-3.6.py to point to the target directory" 
$ sudo nano /usr/local/lib/python3.6/dist-packages/cv2/config-3.6.py 

``` 
    PYTHON_EXTENSIONS_PATHS = [
    os.path.join('/usr/local/lib/python3.6/dist-packages/cv2', 'python-3.6')
    ] + PYTHON_EXTENSIONS_PATHS
``` 

===================================
-- Postgres Installation
$ sudo apt install postgresql postgresql-contrib
$ systemctl status postgresql.service
$ sudo apt install libpq-dev

==================================
-- QT creator
go to https://www.qt.io/download













