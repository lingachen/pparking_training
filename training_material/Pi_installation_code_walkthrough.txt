Pi installation

Symbol definition
-- means the purpose or the target
$ means the code which you need to type on terminal
# means the comment of the code
"""""" means you have to replace the all the thing such as (sudo start """root""" -> sudo start pparking)



==========================================
Before any programming, please have a good habit.I f you find some error such like could not find the zip position, please try to update or upgrade the information.

$ sudo su
$ apt-get update
$ apt-get upgrade # This will take a long time to upgrade the information

==========================================

-- VNC Installation
Open the VNC setting on the left top -> RasperryPi Setting and activate the setting
$ sudo reboot # activate the setting 

Download RealVNC
https://www.realvnc.com/en/connect/download/vnc/ #Download Raspberry Pi version Server
$ sudo reboot # activate the setting, you would see at the right top of the setting
==========================================
-- OpenCV2 installation

Preprocess
$ sudo dphys-swapfile swapoff # turn of the swap
$ sudo vim /etc/dphys-swapfile # change the config file
$ CONF_SWAPSIZE=1024 # change the swapsize bigger in order to make install process easier
$ sudo dphys-swapfile swapon # reopen swap
$ sudo reboot # activate the setting 

Main Process(Long time version Please make sure your directory)
$ sudo apt update && sudo apt install -y cmake g++ wget unzip
$ wget -O opencv.zip https://github.com/opencv/opencv/archive/master.zip
$ unzip opencv.zip
$ mkdir -p build && cd build
$ cmake  ../opencv-master
$ cmake --build .
$ sudo make install

====
Main Process(short time version Please make sure your directory)

$ sudo apt-get update 
$ sudo apt-get upgrade

$ sudo apt-get install screen 
$ sudo apt-get install htop

$ sudo apt-get purge wolfram-engine 
$ sudo apt-get purge libreoffice* 
$ sudo apt-get clean 
$ sudo apt-get autoremove

$ sudo apt-get install build-essential cmake pkg-config 
$ sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev 
$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev 
$ sudo apt-get install libxvidcore-dev libx264-dev 
$ sudo apt-get install libgtk2.0-dev libgtk-3-dev 
$ sudo apt-get install libatlas-base-dev gfortran
$ sudo apt-get install python3-dev
$ sudo apt-get install python3-pip

$ wget -O opencv.zip https://github.com/opencv/opencv/archive/3.4.3.zip 
$ wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/3.4.3.zip 
$ unzip opencv.zip 
$ unzip opencv_contrib.zip

$ sudo pip3 install numpy scipy

$ cd ~/opencv-3.4.3/ 
$ mkdir build 
$ cd build 
$ cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_PYTHON_EXAMPLES=ON -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-3.4.3/modules -D BUILD_EXAMPLES=OFF ..
$ make -j4

$ sudo make install 
$ sudo ldconfig 
$ sudo apt-get update
# sudo reboot

testing usage
python3
$ import cv2
$ cv2.__version__

=========================================
-- Allow root login
$ sudo nano /etc/ssh/sshd_config
Change PermitRootLogin yes
$ sudo su
passwd(this will ask you to type in the password)
sudo systemctl restart sshd

=========================================
-- samda Installation
$ sudo apt-get install samba
$ sudo smbpasswd -a """root"""
$ sudo vim /etc/samba/smb.conf
[Insert at the bottom of the code]
[public] #the display folder_name
path = /lpr_data #sharing path
available = yes
valid users = root
read only = no
browseable = yes
public = yes
writable = yes
create mask = 0777
directory mask = 0777

$ sudo mkdir lpr_data
$ sudo chmod 777 lpr_data
$ sudo systemctl restart smbd.service

=========================================
-- Set TimeZone
$ sudo rm /etc/localtime
$ sudo ln â€“s /usr/share/zoneinfo/Singapore /etc/localtime

=========================================
-- Modify resolution without real monitor
click on the left top menu to modify the question.
usually default will be fine enough

==========================================
-- sudo without password check

$ sudo visudo
insert at the bottom of the code 
"""name""" ALL=(ALL) NOPASSWD: ALL
==========================================
-- Postgres Required API
$ sudo apt install libpq-dev
==========================================
-- Postgres Required main package
$ sudo apt install postgresql postgresql-contrib

==========================================
==========================================
==========================================
Linex Installation

Nvidia driver install
sudo apt-get
apt-cache search nvidia-driver
sudo apt update
sudo apt upgrade
sudo apt install nvidia-driver-390/460
sudo reboot
nvidia-smi
sudo nvidia-settings

==========================================
cuda installation

gcc environment

sudo apt-get update && \
sudo apt-get install build-essential software-properties-common -y && \
sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
sudo apt-get update && \
sudo apt-get install gcc-6 g++-6 -y && \
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6 && \
gcc -v 

https://developer.nvidia.com/cuda-10.0-download-archive
sudo sh cuda_10.0.130_410.48_linux.run

https://developer.nvidia.com/rdp/form/cudnn-download-survey
sudo dpkg -i libcudnn7_7.6.4.38+cuda10.0_amd64.deb
sudo reboot

opencv4.1 with cuda

sudo apt update
sudo apt upgrade
sudo apt install libavcodec-dev libavformat-dev libswscale-dev libavresample-dev
sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
sudo apt install libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev 
sudo apt install libfaac-dev libmp3lame-dev libvorbis-dev
sudo apt install libopencore-amrnb-dev libopencore-amrwb-dev
sudo apt-get install libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils
cd /usr/include/linux
sudo ln -s -f ../libv4l1-videodev.h videodev.h
cd ~
sudo apt-get install libgtk-3-dev
sudo apt-get install python3-dev python3-pip
sudo -H pip3 install -U pip numpy
sudo apt install python3-tesresources
sudo apt-get install libtbb-dev
sudo apt-get install libatlas-base-dev gfortran

 cd ~
 wget -O opencv.zip https://github.com/opencv/opencv/archive/4.1.0.zip
 wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.1.0.zip
 unzip opencv.zip
 unzip opencv_contrib.zip

 echo "Create a virtual environtment for the python binding module"
 sudo pip install virtualenv virtualenvwrapper
 sudo rm -rf ~/.cache/pip
 echo "Edit ~/.bashrc"
 export WORKON_HOME=HOME/.virtualenvs
 export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
 source /usr/local/bin/virtualenvwrapper.sh
 mkvirtualenv cv -p python3
 pip install numpy

 echo "Procced with the installation"
 cd opencv-4.1.0
 mkdir build
 cd build

 cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D INSTALL_C_EXAMPLES=OFF \
-D WITH_TBB=ON \
-D WITH_CUDA=ON \
-D BUILD_opencv_cudacodec=OFF \
-D ENABLE_FAST_MATH=1 \
-D CUDA_FAST_MATH=1 \
-D WITH_CUBLAS=1 \
-D WITH_V4L=ON \
-D WITH_QT=OFF \
-D WITH_OPENGL=ON \
-D WITH_GSTREAMER=ON \
-D OPENCV_GENERATE_PKGCONFIG=ON \
-D OPENCV_PC_FILE_NAME=opencv.pc \
-D OPENCV_ENABLE_NONFREE=ON \
-D OPENCV_PYTHON3_INSTALL_PATH=~/.virtualenvs/cv/lib/python3.6/site-packages \
-D OPENCV_EXTRA_MODULES_PATH=~/downloads/opencv/opencv_contrib-4.1.0/modules \
-D PYTHON_EXECUTABLE=~/.virtualenvs/cv/bin/python \
-D BUILD_EXAMPLES=ON ..

nproc
make -j8
sudo make install