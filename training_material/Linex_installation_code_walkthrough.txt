==========================================
Linex Installation

==========================================
Symbol definition
-- means the purpose or the target
$ means the code which you need to type on terminal
# means the comment of the code
"""""" means you have to replace the all the thing such as (sudo start """root""" -> sudo start pparking)

==========================================
Before any programming, please have a good habit.I f you find some error such like could not find the zip position, please try to update or upgrade the information.

$ sudo su
$ apt-get update
$ apt-get upgrade
$ apt update
$ apt upgrade
==========================================
-- Nvidia driver install # enable GPU on linex computer
$ sudo apt-get
$ apt-cache search nvidia-driver # you might see some green words with nvidia..... which means the package exists in the computer
$ sudo apt update
$ sudo apt upgrade
$ sudo apt install nvidia-driver-390/460 #install the GPU 390 for Ubuntu 18.04, 460 for Ubuntu 20.04
$ sudo reboot
$ nvidia-smi # you will see GPU information with the script

==========================================
-- cuda installation

Build up nvidia environment
$ wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.0.130-1_amd64.deb
$ sudo dpkg -i cuda-repo-ubuntu1804_10.0.130-1_amd64.deb
$ sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
$ sudo apt update
$ wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb
$ sudo apt install ./nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb
$ sudo apt update

check if there is availiable driver
$ ubuntu-drivers devices # if the outpus is other than only nvidia-driver-390 it is fine
$ sudo ubuntu-drivers autoinstall
The output might be something like 
{The following packages have unmet dependencies:
nvidia-driver-418 : Depends: xserver-xorg-video-nvidia-418 (= 418.39-0ubuntu1) but it is not going to be installed Recommends: libnvidia-compute-418:i386 (= 418.39-0ubuntu1) but it is not installable
E: Unable to correct problems, you have held broken packages.}
Please install the package up there like xserver-xorg-video-nvidia-418
$ sudo apt install xserver-xorg-video-nvidia-418 # install until all the message is gone
$ sudo ubuntu-drivers autoinstall
$ sudo reboot
$ nvidia-smi


install CUDA 10 & cuDNN 7.4
sudo apt install --no-install-recommends cuda-10-0 libcudnn7=7.4.1.5-1+cuda10.0


install TensorRT
sudo apt update && sudo apt-get install nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0 && sudo apt update && sudo apt install -y --no-install-recommends libnvinfer-dev=5.0.2-1+cuda10.0 # if there is any error please change the version of libnvinfer to the version compatible to the version

install Tensorflow
pip install --upgrade tensorflow-gpu #if no pip please sudo apt-get install pip


==========================================
-- opencv2 installation with cuda 10.0 in Ubuntu 18.04
$ sudo apt update
$ sudo apt upgrade

$ sudo apt install build-essential cmake pkg-config unzip yasm git checkinstall
$ sudo apt install libjpeg-dev libpng-dev libtiff-dev
$ sudo apt install libavcodec-dev libavformat-dev libswscale-dev libavresample-dev
$ sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
$ sudo apt install libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev 
$ sudo apt install libfaac-dev libmp3lame-dev libvorbis-dev
$ sudo apt install libopencore-amrnb-dev libopencore-amrwb-dev
$ sudo apt-get install libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils
$ cd /usr/include/linux
$ sudo ln -s -f ../libv4l1-videodev.h videodev.h
$ cd ~
$ sudo apt-get install libgtk-3-dev
$ sudo apt-get install python3-dev python3-pip
$ sudo -H pip3 install -U pip numpy
$ sudo apt install python3-testresources
$ sudo apt-get install libtbb-dev
$ sudo apt-get install libatlas-base-dev gfortran
$ sudo apt-get install libprotobuf-dev protobuf-compiler
$ sudo apt-get install libgoogle-glog-dev libgflags-dev
$ sudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen


$ cd ~
$ wget -O opencv.zip https://github.com/opencv/opencv/archive/4.1.0.zip
$ wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.1.0.zip
$ unzip opencv.zip
$ unzip opencv_contrib.zip


# create virtual environment
$ sudo pip install virtualenv virtualenvwrapper
$ sudo rm -rf ~/.cache/pip
$ echo "Edit ~/.bashrc"
$ export WORKON_HOME=$HOME/.virtualenvs
$ export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
$ source /usr/local/bin/virtualenvwrapper.sh
$ mkvirtualenv cv -p python3
$ pip install numpy



make file
$ cd opencv-4.1.0
$ mkdir build
$ cd build
$ cmake -D CMAKE_BUILD_TYPE=RELEASE 
-D CMAKE_INSTALL_PREFIX=/usr/local 
-D INSTALL_PYTHON_EXAMPLES=ON 
-D INSTALL_C_EXAMPLES=OFF 
-D WITH_TBB=ON 
-D WITH_CUDA=ON 
-D BUILD_opencv_cudacodec=OFF 
-D ENABLE_FAST_MATH=1 
-D CUDA_FAST_MATH=1 
-D WITH_CUBLAS=1 
-D WITH_V4L=ON 
-D WITH_QT=OFF 
-D WITH_OPENGL=ON 
-D WITH_GSTREAMER=ON 
-D OPENCV_GENERATE_PKGCONFIG=ON 
-D OPENCV_PC_FILE_NAME=opencv.pc 
-D OPENCV_ENABLE_NONFREE=ON 
-D OPENCV_PYTHON3_INSTALL_PATH=~/.virtualenvs/cv/lib/python3.6/site-packages 
-D OPENCV_EXTRA_MODULES_PATH=~/downloads/opencv/opencv_contrib-4.1.0/modules 
-D PYTHON_EXECUTABLE=~/.virtualenvs/cv/bin/python 
-D BUILD_EXAMPLES=ON ..

$ nproc
$ make -j8
$ sudo make install

$ sudo /bin/bash -c 'echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf'
$ sudo ldconfig


# change the executable environment to global environment
$ sudo cp -r ~/.virtualenvs/cv/lib/python3.6/site-packages/cv2 /usr/local/lib/python3.6/dist-packages

$ echo "Modify config-3.6.py to point to the target directory" 
$ sudo nano /usr/local/lib/python3.6/dist-packages/cv2/config-3.6.py 

``` 
    PYTHON_EXTENSIONS_PATHS = [
    os.path.join('/usr/local/lib/python3.6/dist-packages/cv2', 'python-3.6')
    ] + PYTHON_EXTENSIONS_PATHS
``` 

===================================
-- Postgres Installation
$ sudo apt install postgresql postgresql-contrib
$ systemctl status postgresql.service
$ sudo apt install libpq-dev

==================================














